-- the function that applies the hadamard gate to a single qubit
let hadamard = lift \q :: Qubit . apply(Hadamard,q) in

-- the step function to be used in fold
let hadamardStep = lift \x :: (List[i] Qubit, Qubit) .
                        let (qs,q) = x in
                        let h = force hadamard in
                        let q = h q in
                        q:qs
in

-- the function that applies the hadamard gate to a list of qubits
let hadamardN = fold[i] hadamardStep [] in 
--hadamardN
-- -- expected type : List[j] Qubit ->[j] List[j] Qubit or equivalent

-- This fails because we have no index variable instantiation
let x = apply(QInit,()) in
let y = apply(QInit,()) in
hadamardN [x,y]

