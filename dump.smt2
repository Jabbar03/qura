(set-logic HO_ALL)
(define-fun max ((x Int) (y Int)) Int (ite (< x y) y x)) ; max(x,y)
(define-fun minus ((x Int) (y Int)) Int (ite (< x y) 0 (- x y))) ; minus(x,y)

; PROVE 1 ≤ ((i - j) + 1)
(push 1)
(declare-const j Int)
(assert (<= 0 j))
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (<= 1 (+ (minus i j) 1))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE (((i - j) + 1) - 1) = ((i + 1) - (j + 1))
(push 1)
(declare-const j Int)
(assert (<= 0 j))
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (= (minus (+ (minus i j) 1) 1) (minus (+ i 1) (+ j 1)))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE ((i + 1) - (i + 1)) = 0
(push 1)
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (= (minus (+ i 1) (+ i 1)) 0)))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE max(max(((i0 + 1) + (i0 + 1)), max(max(((i0 + 1) + (i0 + 1)), ((i0 + 1) + (i0 + 1))), max(((i0 + 1) + (i0 + 1)), max(max(((i0 + 1) + (i0 + 1)), max((max((i0 + 1), (i0 + 1)) + (i0 + 1)), max(((i0 + 1) + (i0 + 1)), max((i0 + 1), max[j00 < (i0 + 1)] (max((((i0 + 1) - j00) + (1 + (j00 * 2))), max((max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + (((i0 - j00) + 1) - 1)), max(((((i0 - j00) + 1) - 1) + ((j00 + 1) * 2)), (((j00 + 1) * 2) + (((i0 - j00) + 1) - 1))))) + ((i0 + 1) - (j00 + 1))))))), ((i0 + 1) * 2))))), max(max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2)))))))), max[j00 < (i0 + 1)] (max((1 + ((j00 * 3) + 2)), max((3 + (j00 * 3)), max(((j00 * 3) + 3), ((j00 + 1) * 3)))) + (((i0 + 1) - (j00 + 1)) * 2)))))))), max((1 + ((i0 + 1) * 3)), max((((i0 + 1) * 3) + 1), max(max((1 + ((i0 + 1) * 3)), max((1 + ((i0 + 1) * 3)), max((((i0 + 1) * 3) + 1), max(1, max[j0 < (i0 + 1)] (max((4 + (j0 * 3)), max((max((3 + (j0 * 3)), max(((j0 * 3) + 3), ((j0 + 1) * 3))) + 1), (1 + ((j0 + 1) * 3)))) + (((i0 + 1) - (j0 + 1)) * 3)))))), max((((i0 + 1) * 3) + 1), (1 + ((i0 + 1) * 3)))))))) ≤ ((3 * i0) + 4)
(push 1)
(declare-const i0 Int)
(assert (<= 0 i0))
; the following variables stand for the max value and argmax of max[j00 < (i0 + 1)] (max((((i0 + 1) - j00) + (1 + (j00 * 2))), max((max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + (((i0 - j00) + 1) - 1)), max(((((i0 - j00) + 1) - 1) + ((j00 + 1) * 2)), (((j00 + 1) * 2) + (((i0 - j00) + 1) - 1))))) + ((i0 + 1) - (j00 + 1)))
(declare-const _max0 Int)
(assert (<= 0 _max0))
(declare-const _argmax0 Int)
(assert (<= 0 _argmax0))
; the following block ensures that _max0 = max[j00 < (i0 + 1)] (max((((i0 + 1) - j00) + (1 + (j00 * 2))), max((max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + (((i0 - j00) + 1) - 1)), max(((((i0 - j00) + 1) - 1) + ((j00 + 1) * 2)), (((j00 + 1) * 2) + (((i0 - j00) + 1) - 1))))) + ((i0 + 1) - (j00 + 1)))
(assert (=> (<= (+ i0 1) 0) (= _max0 0)))
(assert (=> (> (+ i0 1) 0) (= _max0 (+ (max (+ (minus (+ i0 1) _argmax0) (+ 1 (* _argmax0 2))) (max (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) (minus (+ (minus i0 _argmax0) 1) 1)) (max (+ (minus (+ (minus i0 _argmax0) 1) 1) (* (+ _argmax0 1) 2)) (+ (* (+ _argmax0 1) 2) (minus (+ (minus i0 _argmax0) 1) 1))))) (minus (+ i0 1) (+ _argmax0 1))))))
(assert (< _argmax0 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ (minus (+ i0 1) _w) (+ 1 (* _w 2))) (max (+ (max (+ 2 (* _w 2)) (max (+ (* _w 2) 2) (* (+ _w 1) 2))) (minus (+ (minus i0 _w) 1) 1)) (max (+ (minus (+ (minus i0 _w) 1) 1) (* (+ _w 1) 2)) (+ (* (+ _w 1) 2) (minus (+ (minus i0 _w) 1) 1))))) (minus (+ i0 1) (+ _w 1))) (+ (max (+ (minus (+ i0 1) _argmax0) (+ 1 (* _argmax0 2))) (max (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) (minus (+ (minus i0 _argmax0) 1) 1)) (max (+ (minus (+ (minus i0 _argmax0) 1) 1) (* (+ _argmax0 1) 2)) (+ (* (+ _argmax0 1) 2) (minus (+ (minus i0 _argmax0) 1) 1))))) (minus (+ i0 1) (+ _argmax0 1)))))))
; the following variables stand for the max value and argmax of max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2))
(declare-const _max1 Int)
(assert (<= 0 _max1))
(declare-const _argmax1 Int)
(assert (<= 0 _argmax1))
; the following block ensures that _max1 = max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2))
(assert (=> (<= (+ i0 1) 0) (= _max1 0)))
(assert (=> (> (+ i0 1) 0) (= _max1 (+ (max (+ 2 (* _argmax1 2)) (max (+ (* _argmax1 2) 2) (* (+ _argmax1 1) 2))) (* (minus (+ i0 1) (+ _argmax1 1)) 2)))))
(assert (< _argmax1 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 2 (* _w 2)) (max (+ (* _w 2) 2) (* (+ _w 1) 2))) (* (minus (+ i0 1) (+ _w 1)) 2)) (+ (max (+ 2 (* _argmax1 2)) (max (+ (* _argmax1 2) 2) (* (+ _argmax1 1) 2))) (* (minus (+ i0 1) (+ _argmax1 1)) 2))))))
; the following variables stand for the max value and argmax of max[j00 < (i0 + 1)] (max((1 + ((j00 * 3) + 2)), max((3 + (j00 * 3)), max(((j00 * 3) + 3), ((j00 + 1) * 3)))) + (((i0 + 1) - (j00 + 1)) * 2))
(declare-const _max2 Int)
(assert (<= 0 _max2))
(declare-const _argmax2 Int)
(assert (<= 0 _argmax2))
; the following block ensures that _max2 = max[j00 < (i0 + 1)] (max((1 + ((j00 * 3) + 2)), max((3 + (j00 * 3)), max(((j00 * 3) + 3), ((j00 + 1) * 3)))) + (((i0 + 1) - (j00 + 1)) * 2))
(assert (=> (<= (+ i0 1) 0) (= _max2 0)))
(assert (=> (> (+ i0 1) 0) (= _max2 (+ (max (+ 1 (+ (* _argmax2 3) 2)) (max (+ 3 (* _argmax2 3)) (max (+ (* _argmax2 3) 3) (* (+ _argmax2 1) 3)))) (* (minus (+ i0 1) (+ _argmax2 1)) 2)))))
(assert (< _argmax2 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 1 (+ (* _w 3) 2)) (max (+ 3 (* _w 3)) (max (+ (* _w 3) 3) (* (+ _w 1) 3)))) (* (minus (+ i0 1) (+ _w 1)) 2)) (+ (max (+ 1 (+ (* _argmax2 3) 2)) (max (+ 3 (* _argmax2 3)) (max (+ (* _argmax2 3) 3) (* (+ _argmax2 1) 3)))) (* (minus (+ i0 1) (+ _argmax2 1)) 2))))))
; the following variables stand for the max value and argmax of max[j0 < (i0 + 1)] (max((4 + (j0 * 3)), max((max((3 + (j0 * 3)), max(((j0 * 3) + 3), ((j0 + 1) * 3))) + 1), (1 + ((j0 + 1) * 3)))) + (((i0 + 1) - (j0 + 1)) * 3))
(declare-const _max3 Int)
(assert (<= 0 _max3))
(declare-const _argmax3 Int)
(assert (<= 0 _argmax3))
; the following block ensures that _max3 = max[j0 < (i0 + 1)] (max((4 + (j0 * 3)), max((max((3 + (j0 * 3)), max(((j0 * 3) + 3), ((j0 + 1) * 3))) + 1), (1 + ((j0 + 1) * 3)))) + (((i0 + 1) - (j0 + 1)) * 3))
(assert (=> (<= (+ i0 1) 0) (= _max3 0)))
(assert (=> (> (+ i0 1) 0) (= _max3 (+ (max (+ 4 (* _argmax3 3)) (max (+ (max (+ 3 (* _argmax3 3)) (max (+ (* _argmax3 3) 3) (* (+ _argmax3 1) 3))) 1) (+ 1 (* (+ _argmax3 1) 3)))) (* (minus (+ i0 1) (+ _argmax3 1)) 3)))))
(assert (< _argmax3 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 4 (* _w 3)) (max (+ (max (+ 3 (* _w 3)) (max (+ (* _w 3) 3) (* (+ _w 1) 3))) 1) (+ 1 (* (+ _w 1) 3)))) (* (minus (+ i0 1) (+ _w 1)) 3)) (+ (max (+ 4 (* _argmax3 3)) (max (+ (max (+ 3 (* _argmax3 3)) (max (+ (* _argmax3 3) 3) (* (+ _argmax3 1) 3))) 1) (+ 1 (* (+ _argmax3 1) 3)))) (* (minus (+ i0 1) (+ _argmax3 1)) 3))))))
; assert the negation of the constraint to check if it is valid
(assert (not (<= (max (max (+ (+ i0 1) (+ i0 1)) (max (max (+ (+ i0 1) (+ i0 1)) (+ (+ i0 1) (+ i0 1))) (max (+ (+ i0 1) (+ i0 1)) (max (max (+ (+ i0 1) (+ i0 1)) (max (+ (max (+ i0 1) (+ i0 1)) (+ i0 1)) (max (+ (+ i0 1) (+ i0 1)) (max (+ i0 1) _max0)))) (* (+ i0 1) 2))))) (max (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) _max1)))))) _max2)))))) (max (+ 1 (* (+ i0 1) 3)) (max (+ (* (+ i0 1) 3) 1) (max (max (+ 1 (* (+ i0 1) 3)) (max (+ 1 (* (+ i0 1) 3)) (max (+ (* (+ i0 1) 3) 1) (max 1 _max3)))) (max (+ (* (+ i0 1) 3) 1) (+ 1 (* (+ i0 1) 3)))))))) (+ (* 3 i0) 4))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE max(((i0 * 3) + 1), max(((i0 * 3) + 1), max(((i0 * 3) + 1), max((1 + (i0 * 3)), max((1 + (i0 * 3)), max(((i0 * 3) + 1), max(1, max[j0 < i0] (max((4 + (j0 * 2)), max((1 + ((j0 * 2) + 2)), (max((2 + (j0 * 2)), max(((j0 * 2) + 2), ((j0 + 1) * 2))) + 1))) + ((i0 - (j0 + 1)) * 3))))))))) ≤ ((3 * i0) + 1)
(push 1)
(declare-const i0 Int)
(assert (<= 0 i0))
; the following variables stand for the max value and argmax of max[j0 < i0] (max((4 + (j0 * 2)), max((1 + ((j0 * 2) + 2)), (max((2 + (j0 * 2)), max(((j0 * 2) + 2), ((j0 + 1) * 2))) + 1))) + ((i0 - (j0 + 1)) * 3))
(declare-const _max0 Int)
(assert (<= 0 _max0))
(declare-const _argmax0 Int)
(assert (<= 0 _argmax0))
; the following block ensures that _max0 = max[j0 < i0] (max((4 + (j0 * 2)), max((1 + ((j0 * 2) + 2)), (max((2 + (j0 * 2)), max(((j0 * 2) + 2), ((j0 + 1) * 2))) + 1))) + ((i0 - (j0 + 1)) * 3))
(assert (=> (<= i0 0) (= _max0 0)))
(assert (=> (> i0 0) (= _max0 (+ (max (+ 4 (* _argmax0 2)) (max (+ 1 (+ (* _argmax0 2) 2)) (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) 1))) (* (minus i0 (+ _argmax0 1)) 3)))))
(assert (< _argmax0 i0))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w i0))(<= (+ (max (+ 4 (* _w 2)) (max (+ 1 (+ (* _w 2) 2)) (+ (max (+ 2 (* _w 2)) (max (+ (* _w 2) 2) (* (+ _w 1) 2))) 1))) (* (minus i0 (+ _w 1)) 3)) (+ (max (+ 4 (* _argmax0 2)) (max (+ 1 (+ (* _argmax0 2) 2)) (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) 1))) (* (minus i0 (+ _argmax0 1)) 3))))))
; assert the negation of the constraint to check if it is valid
(assert (not (<= (max (+ (* i0 3) 1) (max (+ (* i0 3) 1) (max (+ (* i0 3) 1) (max (+ 1 (* i0 3)) (max (+ 1 (* i0 3)) (max (+ (* i0 3) 1) (max 1 _max0))))))) (+ (* 3 i0) 1))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE 1 ≤ (i + 1)
(push 1)
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (<= 1 (+ i 1))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE ((i + 1) - 1) = i
(push 1)
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (= (minus (+ i 1) 1) i)))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE ((i + 1) + 1) = (i + 2)
(push 1)
(declare-const i Int)
(assert (<= 0 i))
; assert the negation of the constraint to check if it is valid
(assert (not (= (+ (+ i 1) 1) (+ i 2))))
(check-sat)
; founds unsat (valid)
(pop 1)

; PROVE max(max(((i0 + 1) + (i0 + 1)), max(max(((i0 + 1) + (i0 + 1)), ((i0 + 1) + (i0 + 1))), ((3 * i0) + 4))), max((2 + ((((i0 + 1) - 1) * 3) + 2)), max((3 + ((((i0 + 1) - 1) * 3) + 1)), max((max(((((i0 + 1) - 1) * 3) + 1), max(max((1 + (((i0 + 1) - 1) * 3)), ((((i0 + 1) - 1) * 3) + 1)), ((3 * i0) + 1))) + 3), max((1 + (1 + ((i0 * 2) + 2))), max((max((2 + (i0 * 2)), max((max((i0 * 2), max((i0 * 2), max((i0 * 2), max((i0 * 2), max((i0 * 2), max((i0 * 2), max[j00 < i0] (max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + ((i0 - (j00 + 1)) * 2)))))))) + 2), ((i0 + 1) * 2))) + 1), max((max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max(((i0 + 1) * 2), max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2)))))))), max[j00 < (i0 + 1)] (max((2 + (j00 + j00)), max((max((1 + j00), max((j00 + 1), (j00 + 1))) + (1 + j00)), (max((1 + j00), max((j00 + 1), (j00 + 1))) + (j00 + 1)))) + (((i0 + 1) - (j00 + 1)) * 2)))))))) + 1), max((max((1 + (i0 + 1)), max(((i0 + 1) + 1), ((i0 + 1) + 1))) + (i0 + 1)), max((max((i0 + 1), max((i0 + 1), max((i0 + 1), max((i0 + 1), max((i0 + 1), max((i0 + 1), max[j00 < (i0 + 1)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 1) - (j00 + 1))))))))) + ((i0 + 1) + 1)), (max(((i0 + 1) + 1), max(((i0 + 1) + 1), max((i0 + 2), max((i0 + 2), max((i0 + 2), max((i0 + 2), max[j00 < (i0 + 2)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 2) - (j00 + 1))))))))) + (i0 + 1))))))))))) ≤ ((3 * i0) + 4)
(push 1)
(declare-const i0 Int)
(assert (<= 0 i0))
; the following variables stand for the max value and argmax of max[j00 < i0] (max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + ((i0 - (j00 + 1)) * 2))
(declare-const _max0 Int)
(assert (<= 0 _max0))
(declare-const _argmax0 Int)
(assert (<= 0 _argmax0))
; the following block ensures that _max0 = max[j00 < i0] (max((2 + (j00 * 2)), max(((j00 * 2) + 2), ((j00 + 1) * 2))) + ((i0 - (j00 + 1)) * 2))
(assert (=> (<= i0 0) (= _max0 0)))
(assert (=> (> i0 0) (= _max0 (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) (* (minus i0 (+ _argmax0 1)) 2)))))
(assert (< _argmax0 i0))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w i0))(<= (+ (max (+ 2 (* _w 2)) (max (+ (* _w 2) 2) (* (+ _w 1) 2))) (* (minus i0 (+ _w 1)) 2)) (+ (max (+ 2 (* _argmax0 2)) (max (+ (* _argmax0 2) 2) (* (+ _argmax0 1) 2))) (* (minus i0 (+ _argmax0 1)) 2))))))
; the following variables stand for the max value and argmax of max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2))
(declare-const _max1 Int)
(assert (<= 0 _max1))
(declare-const _argmax1 Int)
(assert (<= 0 _argmax1))
; the following block ensures that _max1 = max[j000 < (i0 + 1)] (max((2 + (j000 * 2)), max(((j000 * 2) + 2), ((j000 + 1) * 2))) + (((i0 + 1) - (j000 + 1)) * 2))
(assert (=> (<= (+ i0 1) 0) (= _max1 0)))
(assert (=> (> (+ i0 1) 0) (= _max1 (+ (max (+ 2 (* _argmax1 2)) (max (+ (* _argmax1 2) 2) (* (+ _argmax1 1) 2))) (* (minus (+ i0 1) (+ _argmax1 1)) 2)))))
(assert (< _argmax1 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 2 (* _w 2)) (max (+ (* _w 2) 2) (* (+ _w 1) 2))) (* (minus (+ i0 1) (+ _w 1)) 2)) (+ (max (+ 2 (* _argmax1 2)) (max (+ (* _argmax1 2) 2) (* (+ _argmax1 1) 2))) (* (minus (+ i0 1) (+ _argmax1 1)) 2))))))
; the following variables stand for the max value and argmax of max[j00 < (i0 + 1)] (max((2 + (j00 + j00)), max((max((1 + j00), max((j00 + 1), (j00 + 1))) + (1 + j00)), (max((1 + j00), max((j00 + 1), (j00 + 1))) + (j00 + 1)))) + (((i0 + 1) - (j00 + 1)) * 2))
(declare-const _max2 Int)
(assert (<= 0 _max2))
(declare-const _argmax2 Int)
(assert (<= 0 _argmax2))
; the following block ensures that _max2 = max[j00 < (i0 + 1)] (max((2 + (j00 + j00)), max((max((1 + j00), max((j00 + 1), (j00 + 1))) + (1 + j00)), (max((1 + j00), max((j00 + 1), (j00 + 1))) + (j00 + 1)))) + (((i0 + 1) - (j00 + 1)) * 2))
(assert (=> (<= (+ i0 1) 0) (= _max2 0)))
(assert (=> (> (+ i0 1) 0) (= _max2 (+ (max (+ 2 (+ _argmax2 _argmax2)) (max (+ (max (+ 1 _argmax2) (max (+ _argmax2 1) (+ _argmax2 1))) (+ 1 _argmax2)) (+ (max (+ 1 _argmax2) (max (+ _argmax2 1) (+ _argmax2 1))) (+ _argmax2 1)))) (* (minus (+ i0 1) (+ _argmax2 1)) 2)))))
(assert (< _argmax2 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 2 (+ _w _w)) (max (+ (max (+ 1 _w) (max (+ _w 1) (+ _w 1))) (+ 1 _w)) (+ (max (+ 1 _w) (max (+ _w 1) (+ _w 1))) (+ _w 1)))) (* (minus (+ i0 1) (+ _w 1)) 2)) (+ (max (+ 2 (+ _argmax2 _argmax2)) (max (+ (max (+ 1 _argmax2) (max (+ _argmax2 1) (+ _argmax2 1))) (+ 1 _argmax2)) (+ (max (+ 1 _argmax2) (max (+ _argmax2 1) (+ _argmax2 1))) (+ _argmax2 1)))) (* (minus (+ i0 1) (+ _argmax2 1)) 2))))))
; the following variables stand for the max value and argmax of max[j00 < (i0 + 1)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 1) - (j00 + 1)))
(declare-const _max3 Int)
(assert (<= 0 _max3))
(declare-const _argmax3 Int)
(assert (<= 0 _argmax3))
; the following block ensures that _max3 = max[j00 < (i0 + 1)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 1) - (j00 + 1)))
(assert (=> (<= (+ i0 1) 0) (= _max3 0)))
(assert (=> (> (+ i0 1) 0) (= _max3 (+ (max (+ 1 _argmax3) (max (+ _argmax3 1) (+ _argmax3 1))) (minus (+ i0 1) (+ _argmax3 1))))))
(assert (< _argmax3 (+ i0 1)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 1)))(<= (+ (max (+ 1 _w) (max (+ _w 1) (+ _w 1))) (minus (+ i0 1) (+ _w 1))) (+ (max (+ 1 _argmax3) (max (+ _argmax3 1) (+ _argmax3 1))) (minus (+ i0 1) (+ _argmax3 1)))))))
; the following variables stand for the max value and argmax of max[j00 < (i0 + 2)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 2) - (j00 + 1)))
(declare-const _max4 Int)
(assert (<= 0 _max4))
(declare-const _argmax4 Int)
(assert (<= 0 _argmax4))
; the following block ensures that _max4 = max[j00 < (i0 + 2)] (max((1 + j00), max((j00 + 1), (j00 + 1))) + ((i0 + 2) - (j00 + 1)))
(assert (=> (<= (+ i0 2) 0) (= _max4 0)))
(assert (=> (> (+ i0 2) 0) (= _max4 (+ (max (+ 1 _argmax4) (max (+ _argmax4 1) (+ _argmax4 1))) (minus (+ i0 2) (+ _argmax4 1))))))
(assert (< _argmax4 (+ i0 2)))
(assert (forall ((_w Int)) (=> (and (<= 0 _w) (< _w (+ i0 2)))(<= (+ (max (+ 1 _w) (max (+ _w 1) (+ _w 1))) (minus (+ i0 2) (+ _w 1))) (+ (max (+ 1 _argmax4) (max (+ _argmax4 1) (+ _argmax4 1))) (minus (+ i0 2) (+ _argmax4 1)))))))
; assert the negation of the constraint to check if it is valid
(assert (not (<= (max (max (+ (+ i0 1) (+ i0 1)) (max (max (+ (+ i0 1) (+ i0 1)) (+ (+ i0 1) (+ i0 1))) (+ (* 3 i0) 4))) (max (+ 2 (+ (* (minus (+ i0 1) 1) 3) 2)) (max (+ 3 (+ (* (minus (+ i0 1) 1) 3) 1)) (max (+ (max (+ (* (minus (+ i0 1) 1) 3) 1) (max (max (+ 1 (* (minus (+ i0 1) 1) 3)) (+ (* (minus (+ i0 1) 1) 3) 1)) (+ (* 3 i0) 1))) 3) (max (+ 1 (+ 1 (+ (* i0 2) 2))) (max (+ (max (+ 2 (* i0 2)) (max (+ (max (* i0 2) (max (* i0 2) (max (* i0 2) (max (* i0 2) (max (* i0 2) (max (* i0 2) _max0)))))) 2) (* (+ i0 1) 2))) 1) (max (+ (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) (max (* (+ i0 1) 2) _max1)))))) _max2)))))) 1) (max (+ (max (+ 1 (+ i0 1)) (max (+ (+ i0 1) 1) (+ (+ i0 1) 1))) (+ i0 1)) (max (+ (max (+ i0 1) (max (+ i0 1) (max (+ i0 1) (max (+ i0 1) (max (+ i0 1) (max (+ i0 1) _max3)))))) (+ (+ i0 1) 1)) (+ (max (+ (+ i0 1) 1) (max (+ (+ i0 1) 1) (max (+ i0 2) (max (+ i0 2) (max (+ i0 2) (max (+ i0 2) _max4)))))) (+ i0 1))))))))))) (+ (* 3 i0) 4))))
(check-sat)
; founds unsat (valid)
(pop 1)
