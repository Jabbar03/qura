let qrev = lift forall m. forall i.\reg :: List[j<m] Qubit{i+m+j}.
  let revStep = lift forall k. \(rev, q) :: (List[j<k] Qubit{i+2*m-(j+1)}, Qubit{i+2*m-(k+1)}). rev:q in
  fold(revStep, [], reg)
in

let rotate = forall i. forall m. lift forall k.\((ctrls, trg), ctrl)::((List[j<k] Qubit{i+m+j+1}, Qubit{i+m+k}), Qubit{i+m+k}).
    let (ctrl, trg) = (force cR @(m+1-k) @(i+m+k) @(i+m+k)) ctrl trg in -- (Qubit{i+m+k+1}, Qubit{i+m+k+1})
    (ctrls:ctrl, trg) -- (List[j<k+1] Qubit{i+m+j+1}, Qubit{i+m+k+1})
in
let qft = lift forall n. forall i.\reg :: List[j<n] Qubit{i}.
  let qftStep = lift forall m.\(ctrls, trg)::(List[j<m] Qubit{i+m+j}, Qubit{i}).
      let revctrls = (force qrev @m @i) ctrls in -- List[j<m] Qubit{i+2m-(j+1)}
      let (ctrls, trg) = fold(rotate @i @m, ([], trg), revctrls) in
      -- (ctrls, trg) :: (List[j<m] Qubit{i+m+j+1}, Qubit{i+2m})
      let trg = (force hadamard @(i+2*m)) trg in -- Qubit{i+2m+1}
      ctrls:trg -- List[i<m+1] Qubit{i+m+1+j}
  in fold(qftStep, [], reg) -- List[j<n] Qubit{i+n+j}
in qft