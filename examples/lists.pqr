-- reverses a list of i qubits
let rev = lift @i.\list::List[i] Qubit.
  let revStep = lift @j.\(qs, q)::(List[j] Qubit, Qubit). q:qs
  in fold(revStep, [], list)
in

-- concatenates two lists of respectively i and j qubits
let concat = lift @i.@j.\list1::List[i] Qubit. \list2::List[j] Qubit.
  let concatStep = lift @k.\(qs, q)::(List[k+j] Qubit, Qubit). q:qs in
  fold(concatStep, list2, (force rev @i) list1)
in

-- maps a 1-qubit operation over a list of j qubits
-- the operation can use ancillary qubits (corresponds to i>1)
let qmap = lift @i.\f :: !(Qubit -o[i,0] Qubit). @j. \list :: List[j] Qubit.
  let mapStep = lift @k.\(qs, q)::(List[k] Qubit, Qubit). ((force f) q):qs in
  fold(mapStep, [], (force rev @j) list)
in

-- zips two non-empty lists of i+1 qubits
let qzip = lift @i . \(a,b) :: (List[i+1] Qubit, List[i+1] Qubit).
  let zipStep = lift @j . \(acc,relem) :: ((List[i+1-j] Qubit, List[j] (Qubit,Qubit)), Qubit).
    let (llist,reslist) = acc in
    let lelem:ls = llist !:: List[i-j+1] Qubit in -- we can assume this because zipstep is only called by fold, where j < i+1
    let reslist = (lelem, relem) : reslist in
    (ls, reslist)
  in let (_, zippedlist) = fold(zipStep, (a,[]), b) :: (List[0] Qubit, List[i+1] (Qubit,Qubit))
  in zippedlist
in

-- applies the hadamard gate to a single qubit
let hadamard = lift \q::Qubit. apply(Hadamard, q)
in

-- applies the hadamard gate to a list of qubits
let hadamardN = lift ((force qmap @1) hadamard)
in

-- negates a single qubit in a dumb way, using an ancilla
let dumbNot = lift \q :: Qubit .
  let a = apply(QInit1,()) in
  let (a,q) = apply(CNot,(a,q)) in
  let _ = apply(QDiscard,a) in
  q
in

-- negates a list of qubits in a dumb way, using an ancilla
let dumbNotN = lift ((force qmap @2) dumbNot)
in

(force dumbNotN @4) [apply(QInit0,()),apply(QInit1,()),apply(QInit0,()),apply(QInit1,())]