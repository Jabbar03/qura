-- rotate @n @m ((q, cs), c) applies a controlled rotation gate to q with control
-- the magnitude of the rotation depends on n (the iteration of the qft) and m (the qubit being rotated)
let rotate = @n. lift @m.\((q, cs), c) :: ((Qubit, List[_<m] Qubit), Qubit).
    let rotation = force cR @ (n+1-m) in 
    let (q, c) = rotation q c in
    (q, cs:c)
in

let revStep = lift @i.\(qs, q) :: (List[k<i] Qubit, Qubit).
  qs:q
in

let qrev = lift @n. \qs :: List[i<n] Qubit.
  fold(revStep, [], qs)
in

-- qft @i (qs) applies the quantum fourier transform to a list of i qubits
-- by iterating qftStep over the list of qubits
let qft = lift @i.\qs :: List[k<i] Qubit.
  -- qftStep @j (qs, q) applies the j-th iteration of the qft algorithm to the qubit q
  -- which consists of j rotations with target j and control each of the quibits in qs
  -- followed by a hadamard gate on j
  let qftStep = lift @j.\(qs, q) :: (List[h<j] Qubit, Qubit).
      let revqs = (force qrev @j) qs in
      let (q, qs) = fold(rotate @j, (q, []), revqs) in
      let q = force hadamard q in
      qs:q
  in
  fold(qftStep, [], qs)
in

qft